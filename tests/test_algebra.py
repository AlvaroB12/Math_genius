import unittest
from ..algebra import *

class TestAlgebra(unittest.TestCase):

    def test_solve_linear_equation(self):
        self.assertEqual(solve_linear_equation(2, 4), -2)
        self.assertEqual(solve_linear_equation(3, 6), -2)
        self.assertEqual(solve_linear_equation(4, 8), -2)
        self.assertEqual(solve_linear_equation(5, 10), -2)
        self.assertEqual(solve_linear_equation(6, 12), -2)
        self.assertEqual(solve_linear_equation(7, 14), -2)
        self.assertEqual(solve_linear_equation(8, 16), -2)
        self.assertEqual(solve_linear_equation(9, 18), -2)
        self.assertEqual(solve_linear_equation(10, 20), -2)
        self.assertEqual(solve_linear_equation(11, 22), -2)
        self.assertEqual(solve_linear_equation(12, 24), -2)
        self.assertEqual(solve_linear_equation(13, 26), -2)
        self.assertEqual(solve_linear_equation(14, 28), -2)
        self.assertEqual(solve_linear_equation(15, 30), -2)
        self.assertEqual(solve_linear_equation(16, 32), -2)
        self.assertEqual(solve_linear_equation(17, 34), -2)
        self.assertEqual(solve_linear_equation(18, 36), -2)
        self.assertEqual(solve_linear_equation(19, 38), -2)
        self.assertEqual(solve_linear_equation(20, 40), -2)

    def test_solve_quadratic_equation(self):
        self.assertEqual(solve_quadratic_equation(1, 2, 1), -1)
        self.assertEqual(solve_quadratic_equation(1, -3, 2), [2, 1])
        self.assertEqual(solve_quadratic_equation(1, -5, 6), [3, 2])
        self.assertEqual(solve_quadratic_equation(1, -7, 12), [4, 3])
        self.assertEqual(solve_quadratic_equation(1, -9, 20), [5, 4])
        self.assertEqual(solve_quadratic_equation(1, -11, 30), [6, 5])
        self.assertEqual(solve_quadratic_equation(1, -13, 42), [7, 6])
        self.assertEqual(solve_quadratic_equation(1, -15, 56), [8, 7])
        self.assertEqual(solve_quadratic_equation(1, -17, 72), [9, 8])
        self.assertEqual(solve_quadratic_equation(1, -19, 90), [10, 9])

    def test_simplify_expression(self):
        self.assertEqual(simplify_expression("2+4"), 6)
        self.assertEqual(simplify_expression("3+6"), 9)
        self.assertEqual(simplify_expression("4+8"), 12)
        self.assertEqual(simplify_expression("5+10"), 15)
        self.assertEqual(simplify_expression("6+12"), 18)
        self.assertEqual(simplify_expression("7+14"), 21)
        self.assertEqual(simplify_expression("8+16"), 24)
        self.assertEqual(simplify_expression("9+18"), 27)
        self.assertEqual(simplify_expression("10+20"), 30)
        self.assertEqual(simplify_expression("11+22"), 33)
        self.assertEqual(simplify_expression("12+24"), 36)
        self.assertEqual(simplify_expression("13+26"), 39)
        self.assertEqual(simplify_expression("14+28"), 42)
        self.assertEqual(simplify_expression("15+30"), 45)
        self.assertEqual(simplify_expression("16+32"), 48)
        self.assertEqual(simplify_expression("17+34"), 51)
        self.assertEqual(simplify_expression("18+36"), 54)
        self.assertEqual(simplify_expression("19+38"), 57)
        self.assertEqual(simplify_expression("20+40"), 60)

    def test_expand_expression(self):
        self.assertEqual(expand_expression("2*4"), 8)
        self.assertEqual(expand_expression("3*6"), 18)
        self.assertEqual(expand_expression("4*8"), 32)
        self.assertEqual(expand_expression("5*10"), 50)
        self.assertEqual(expand_expression("6*12"), 72)
        self.assertEqual(expand_expression("7*14"), 98)
        self.assertEqual(expand_expression("8*16"), 128)
        self.assertEqual(expand_expression("9*18"), 162)
        self.assertEqual(expand_expression("10*20"), 200)
        self.assertEqual(expand_expression("11*22"), 242)
        self.assertEqual(expand_expression("12*24"), 288)
        self.assertEqual(expand_expression("13*26"), 338)
        self.assertEqual(expand_expression("14*28"), 392)
        self.assertEqual(expand_expression("15*30"), 450)
        self.assertEqual(expand_expression("16*32"), 512)
        self.assertEqual(expand_expression("17*34"), 578)
        self.assertEqual(expand_expression("18*36"), 648)
        self.assertEqual(expand_expression("19*38"), 722)
        self.assertEqual(expand_expression("20*40"), 800)

    def test_factor_expression(self):
        self.assertEqual(factor_expression("2+4"), 6)
        self.assertEqual(factor_expression("3+6"), 9)
        self.assertEqual(factor_expression("4+8"), 12)
        self.assertEqual(factor_expression("5+10"), 15)
        self.assertEqual(factor_expression("6+12"), 18)
        self.assertEqual(factor_expression("7+14"), 21)
        self.assertEqual(factor_expression("8+16"), 24)
        self.assertEqual(factor_expression("9+18"), 27)
        self.assertEqual(factor_expression("10+20"), 30)
        self.assertEqual(factor_expression("11+22"), 33)
        self.assertEqual(factor_expression("12+24"), 36)
        self.assertEqual(factor_expression("13+26"), 39)
        self.assertEqual(factor_expression("14+28"), 42)
        self.assertEqual(factor_expression("15+30"), 45)
        self.assertEqual(factor_expression("16+32"), 48)
        self.assertEqual(factor_expression("17+34"), 51)
        self.assertEqual(factor_expression("18+36"), 54)
        self.assertEqual(factor_expression("19+38"), 57)
        self.assertEqual(factor_expression("20+40"), 60)

    def test_factorize(self):
        self.assertEqual(factorize(2), [2])
        self.assertEqual(factorize(3), [3])
        self.assertEqual(factorize(4), [2, 2])
        self.assertEqual(factorize(5), [5])
        self.assertEqual(factorize(6), [2, 3])
        self.assertEqual(factorize(7), [7])
        self.assertEqual(factorize(8), [2, 2, 2])
        self.assertEqual(factorize(9), [3, 3])
        self.assertEqual(factorize(10), [2, 5])
        self.assertEqual(factorize(11), [11])
        self.assertEqual(factorize(12), [2, 2, 3])
        self.assertEqual(factorize(13), [13])
        self.assertEqual(factorize(14), [2, 7])
        self.assertEqual(factorize(15), [3, 5])
        self.assertEqual(factorize(16), [2, 2, 2, 2])
        self.assertEqual(factorize(17), [17])
        self.assertEqual(factorize(18), [2, 3, 3])
        self.assertEqual(factorize(19), [19])
        self.assertEqual(factorize(20), [2, 2, 5])

    def test_matrix_determinant(self):
        self.assertEqual(matrix_determinant([[1, 2], [3, 4]]), -2)
        self.assertEqual(matrix_determinant([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 0)
        self.assertEqual(matrix_determinant([[1, 2, 3], [4, 5, 6], [7, 8, 10]]), -3)
        self.assertEqual(matrix_determinant([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]), 0)
        self.assertEqual(matrix_determinant([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 17]]), -4)

if __name__ == '__main__':
    print("Running algebra tests...")
    print("=================================")
    unittest.main()
